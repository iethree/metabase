name: Release [WIP]

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Metabase version (e.g. v0.46.3)'
        type: string
        required: true
      commit:
        description: 'A full-length commit SHA-1 hash'
        required: true

jobs:
  download-uberjar:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    strategy:
      matrix:
        edition: [oss, ee]
    steps:
    - name: Fail early on the incorrect version format
      if: ${{ !(startsWith(inputs.version,'v0.') || startsWith(inputs.version,'v1.')) }}
      run: |
        echo "The version format is invalid!"
        echo "It must start with either 'v0.' or 'v1.'."
        echo "Please, try again."
        exit 1
    - name: find_release_artifact
      id: find_release_artifact
      uses: actions/github-script@v6
      with:
        result-encoding: string
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: `metabase-${{ matrix.edition }}-${{ inputs.commit }}-uberjar`,
            per_page: 1,
          });

          if (!artifacts.data?.artifacts?.[0]?.archive_download_url) {
            throw new Error(`No artifacts found for ${inputs.commit}`);
          }

          const download_url = artifacts.data.artifacts[0].archive_download_url;

          console.log('download url', download_url);

          return download_url;
    - name: download-uberjar-artifact
      env:
        DOWNLOAD_LINK: ${{ steps.find_release_artifact.outputs.result }}
      run: |
        curl -sL \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            $DOWNLOAD_LINK \
            -o mb.zip
        ls
    - run: unzip mb.zip
    - name: Verify that this is a valid JAR file
      run: file --mime-type ./metabase.jar | grep "application/zip"
    - name: verify_checksum
      run: |
        grep -q $(sha256sum ./metabase.jar) SHA256.sum && echo "checksums match" || exit 1
    - name: Upload Uberjar as artifact
      uses: actions/upload-artifact@v3
      with:
        name: metabase-${{ matrix.edition }}-uberjar
        path: |
          ./metabase.jar
          ./COMMIT-ID
          ./SHA256.sum

  # trigger-docs-update:
  #   runs-on: ubuntu-22.04
  #   timeout-minutes: 10
  #   steps:
  #     - uses: actions/github-script@v6
  #       with:
  #         github-token: ${{ secrets.DOCS_UPDATE_TOKEN }}
  #         script: |
  #           github.rest.repos.createDispatchEvent({
  #             owner: '${{ github.repository_owner }}',
  #             repo: '${{ secrets.DOCS_REPO }}',
  #             event_type: 'trigger-docs-update',
  #             client_payload: {
  #               version: '${{ github.ref_name }}'
  #             }
  #           });

  check-uberjar:
    runs-on: ubuntu-22.04
    needs: download-uberjar
    timeout-minutes: 10
    strategy:
      matrix:
        java-version: [11, 17]
        edition: [oss, ee]
    steps:
    - name: Prepare JRE (Java Run-time Environment)
      uses: actions/setup-java@v3
      with:
        java-package: jre
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    - uses: actions/download-artifact@v3
      name: Retrieve previously downloaded Uberjar
      with:
        name: metabase-${{ matrix.edition }}-uberjar
    - name: Reveal its version.properties
      run: jar xf metabase.jar version.properties && cat version.properties
    - name: Display when and where it was downloaded
      run: |
        cat timestamp
        cat url.txt
    - name: Show the checksum
      run: cat SHA256.sum
    - name: Launch Metabase Uberjar (and keep it running)
      run: java -jar ./metabase.jar &
    - name: Wait for Metabase to start
      run: while ! curl -s localhost:3000/api/health; do sleep 1; done
      timeout-minutes: 3
    - name: Check API health
      run: curl -s localhost:3000/api/health

  push-tags:
    needs: check-uberjar
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    strategy:
      matrix:
        edition: [oss, ee]
    steps:
    # EE is always v1.x.y, OSS is always v0.x.y
    - name: Determine the canonical version
      uses: actions/github-script@v6
      id: canonical_version
      with:
        result-encoding: string
        script: |
          const version = '${{ inputs.version }}';
          const edition = '${{ matrix.edition }}';

          const canonical_version = edition === "ee"
            ? version.replace(/^v0\./, "v1.") // always e.g. v1.47.2
            : version.replace(/^v1\./, "v0."); // always e.g. v0.47.2

          console.log("The canonical version of this Metabase", edition, "edition is", canonical_version);

          // delete old ref
          await github.rest.git.deleteRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `refs/tags/${canonical_version}`,
          });

          // create new ref
          const newRef = await github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `refs/tags/${canonical_version}`,
            sha: '${{ inputs.commit }}',
          });

          if (newRef.status !== 201) {
            console.error(`failed to tag release`);
            process.exit(1);
          }

  upload-to-s3:
    runs-on: ubuntu-22.04
    needs: check-uberjar
    timeout-minutes: 15
    strategy:
      matrix:
        edition: [oss, ee]
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_S3_RELEASE_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_S3_RELEASE_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - uses: actions/download-artifact@v3
      name: Retrieve uberjar artifact
      with:
        name: metabase-${{ matrix.edition }}-uberjar
    - name: Determine the upload path ## EE is always v1.x.y, OSS is always v0.x.y
      uses: actions/github-script@v6
      id: version_path
      with:
        result-encoding: string
        script: |
          const version = '${{ inputs.version }}';
          const edition = '${{ matrix.edition }}';

          const version_path = edition === 'ee'
            ? 'enterprise/' + version.replace(/^v0\./, "v1.") // always e.g. v1.47.2
            : version.replace(/^v1\./, "v0."); // always e.g. v0.45.6;

          console.log("The download path for this", edition, "edition is", version_path);
          return version_path;
    - name: Upload to S3
      run:
        # FIXME: test bucket
        aws s3 cp ./target/uberjar/metabase.jar s3://iethree-downloads.metabase.com/${{ steps.version_path.outputs.result }}/metabase.jar


  containerize:
    runs-on: ubuntu-22.04
    needs: check-uberjar
    timeout-minutes: 15
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # IMPORTANT! to get all the tags
    - uses: actions/download-artifact@v3
      name: Retrieve previously downloaded Uberjar
      with:
        name: metabase-uberjar-${{ github.ref_name }}
    - name: Move the Uberjar to the context dir
      run: mv ./metabase.jar bin/docker/.
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: network=host
    - name: Build ${{ matrix.edition }} container
      uses: docker/build-push-action@v3
      with:
        context: bin/docker/.
        platforms: linux/amd64
        network: host
        tags: localhost:5000/local-metabase:${{ github.ref_name }}
        no-cache: true
        push: true

    - name: Launch container
      run: docker run --rm -dp 3000:3000 localhost:5000/local-metabase:${{ github.ref_name }}
      timeout-minutes: 5
    - name: Wait for Metabase to start
      run: while ! curl -s 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done
      timeout-minutes: 3

    - name: Determine the target Docker Hub repository
      run: |
        if [[ ${{ github.ref_name }} == v1* ]]; then
          echo "Metabase EE: image is going to be pushed to ${{ github.repository_owner }}/metabase-enterprise"
          echo "DOCKERHUB_REPO=${{ github.repository_owner }}/metabase-enterprise" >> $GITHUB_ENV
        else
          echo "Metabase OSS: image is going to be pushed to ${{ github.repository_owner }}/metabase"
          echo "DOCKERHUB_REPO=${{ github.repository_owner }}/metabase" >> $GITHUB_ENV
        fi

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_RELEASE_USERNAME }}
        password: ${{ secrets.DOCKERHUB_RELEASE_TOKEN }}
    - name: Retag and push container image to Docker Hub
      run: |
        echo "Pushing ${{ github.ref_name }} to ${{ env.DOCKERHUB_REPO }} ..."
        docker tag localhost:5000/local-metabase:${{ github.ref_name }} ${{ env.DOCKERHUB_REPO }}:${{ github.ref_name }}
        docker push ${{ env.DOCKERHUB_REPO }}:${{ github.ref_name }}
        echo "Finished!"

    - name: Check if the container image should be tagged as latest
      uses: actions/github-script@v6
      id: latest_version_check
      with:
        result-encoding: string
        script: |
          const currentTag = context.payload.ref.replace("refs/tags/", "");

          const { execSync } = require("child_process");

          const isNumber = s => s.match(/\d+/) && s.match(/\d+/).shift() == s;

          const parseVersion = version => {
            const parts = version.split(".");
            const prefix = parts[0];
            const isOSS = prefix === "v0";
            const isEE = prefix === "v1";
            const feature = parseInt(parts[1], 10);
            const maintenance = parseInt(parts[2], 10);
            const build = parseInt(parts[3], 10);
            const prerelease = parts[2] ? !isNumber(parts[2]) : false;
            return { prefix, feature, maintenance, build, isOSS, isEE, prerelease };
          }

          const byVersions = (tag1, tag2) => {
            const v1 = parseVersion(tag1);
            const v2 = parseVersion(tag2);
            const order1 = v1.feature * 1e6 + v1.maintenance * 1e3 + (v1.build || 0);
            const order2 = v2.feature * 1e6 + v2.maintenance * 1e3 + (v2.build || 0);
            return order2 - order1;
          }

          const currentVersion = parseVersion(currentTag);
          console.log("Current version for", currentTag, "is", currentVersion);
          if (currentVersion.prerelease) {
            console.log("This is a pre-release!");
            console.log("There is no need to tag the container image as latest.");
            return "not-latest";
          }

          console.log();
          console.log("Enumerating all git tags...");
          const allTags = execSync("git tag -l").toString("utf-8").split("\n");
          console.log("Found total", allTags.length, "tags");

          console.log();
          console.log("Filtering for", currentVersion.isOSS ? "OSS" : "EE", "which excludes prerelease tags...");
          const relevantTags = allTags.filter(tag => {
            const { prefix, prerelease } = parseVersion(tag);
            return !prerelease && prefix === currentVersion.prefix;
          });
          console.log("Found total", relevantTags.length, "filtered tags");
          if (relevantTags.length < 10) {
            console.error("Something is NOT RIGHT! Please check all git tags!!!");
            return "not-latest";
          }

          console.log();
          console.log("Sorting tags to find the highest version numbers...");
          const sortedTags = relevantTags.sort(byVersions)
          console.log("Showing 20 tags with the highest versions...");
          const topTags = sortedTags.slice(0, 20);
          topTags.map(tag => {
            const marker = tag === currentTag ? "--->" : "    ";
            console.log(marker, tag);
          });

          const latestTag = topTags[0];
          const isLatest = latestTag === currentTag;
          console.log();
          if (isLatest) {
            console.log("Thus, the container image for", currentTag, "must be marked as latest.");
          } else {
            console.log("The latest container image stays as", latestTag);
            console.log("There is no need to tag the", currentTag, "container image as latest.");
          }
          return isLatest ? "latest" : "not-latest";

    - name: Tag the container image as latest
      if: ${{ steps.latest_version_check.outputs.result == 'latest' }}
      run: |
        echo "Pushing ${{ env.DOCKERHUB_REPO }}:latest ..."
        docker tag localhost:5000/local-metabase:${{ github.ref_name }} ${{ env.DOCKERHUB_REPO }}:latest
        docker push ${{ env.DOCKERHUB_REPO }}:latest
        echo "Finished!"

  verify-docker-pull:
    runs-on: ubuntu-22.04
    needs: containerize
    timeout-minutes: 15
    steps:
    - name: Login to Docker Hub # authenticated, to avoid being rate-throttled
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_RELEASE_USERNAME }}
        password: ${{ secrets.DOCKERHUB_RELEASE_TOKEN }}
    - name: Determine the container image to pull
      run: |
        if [[ ${{ github.ref_name }} == v1* ]]; then
          echo "DOCKERHUB_REPO=${{ github.repository_owner }}/metabase-enterprise" >> $GITHUB_ENV
        else
          echo "DOCKERHUB_REPO=${{ github.repository_owner }}/metabase" >> $GITHUB_ENV
        fi
    - name: Pull the container image
      run: |
        echo "Pulling container image ${{ env.DOCKERHUB_REPO }}:${{ github.ref_name }} ..."
        docker pull ${{ env.DOCKERHUB_REPO }}:${{ github.ref_name }}
        echo "Successful!"
    - name: Launch container
      run: docker run --rm -dp 3000:3000 ${{ env.DOCKERHUB_REPO }}:${{ github.ref_name }}
      timeout-minutes: 5
    - name: Wait for Metabase to start
      run: while ! curl -s 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done
      timeout-minutes: 3

  # publish-elastic-beanstalk-artifacts:
  #   runs-on: ubuntu-22.04
  #   needs: containerize
  #   timeout-minutes: 15
  #   env:
  #     NO_SLACK: 1
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Prepare back-end environment
  #     uses: ./.github/actions/prepare-backend
  #   - name: Configure AWS credentials for S3
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_S3_RELEASE_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_S3_RELEASE_SECRET_ACCESS_KEY }}
  #       aws-region: us-east-1
  #   - name: Publish Elastic Beanstalk artifacts
  #     run: ./bin/ebs.sh :version ${{ github.ref_name }}
