name: Release [WIP]
run-name: Release ${{ inputs.version }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Metabase version (e.g. v0.46.3)'
        type: string
        required: true
      commit:
        description: 'A full-length commit SHA-1 hash'
        required: true

jobs:
  download-uberjar:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    strategy:
      matrix:
        edition: [oss, ee]
    steps:
    - name: Fail early on the incorrect version format
      if: ${{ !(startsWith(inputs.version,'v0.') || startsWith(inputs.version,'v1.')) }}
      run: |
        echo "The version format is invalid!"
        echo "It must start with either 'v0.' or 'v1.'."
        echo "Please, try again."
        exit 1
    - name: find_release_artifact
      id: find_release_artifact
      uses: actions/github-script@v6
      with:
        result-encoding: string
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: `metabase-${{ matrix.edition }}-${{ inputs.commit }}-uberjar`,
            per_page: 1,
          });

          if (!artifacts.data?.artifacts?.[0]?.archive_download_url) {
            throw new Error(`No artifacts found for ${{ inputs.commit }}`);
          }

          const download_url = artifacts.data.artifacts[0].archive_download_url;

          console.log('download url', download_url);

          return download_url;
    - name: download-uberjar-artifact
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            ${{ steps.find_release_artifact.outputs.result }} \
            -o mb.zip
    - name: unzip uberjar artifact
      run: unzip mb.zip
    - name: Verify that this is a valid JAR file
      run: file --mime-type ./metabase.jar | grep "application/zip"
    - name: Reveal its version.properties
      run: jar xf metabase.jar version.properties && cat version.properties
    - name: Check JAR version properties
      run: |
        grep -q $(sha256sum ./metabase.jar) SHA256.sum && echo "checksums match" || (echo "checksum mismatch" && exit 1)
        grep -q ${{ inputs.commit }} COMMIT-ID && echo "commit ids match" || (echo "commit-id mismatch" && exit 1)
        grep -q $(cut -c 1-7 <<< ${{ inputs.commit }}) version.properties && echo "version.properties commit matches" || (echo "version.properties commit mismatch" && exit 1)
        grep -q $(cut -c 3-99 <<< ${{ inputs.version }}) version.properties && echo "version.properties version number matches" || (echo "version.properties version number mismatch" && exit 1)
        grep -q "SNAPSHOT" version.properties && (echo "jar is a snapshot" && exit 1) || echo "jar is not a snapshot build"

    - name: Upload Uberjar as artifact
      uses: actions/upload-artifact@v3
      with:
        name: metabase-${{ matrix.edition }}-uberjar
        path: |
          ./metabase.jar
          ./COMMIT-ID
          ./SHA256.sum
          ./version.properties

  upload-to-s3:
    runs-on: ubuntu-22.04
    needs: download-uberjar
    timeout-minutes: 15
    strategy:
      matrix:
        edition: [oss, ee]
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_S3_RELEASE_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_S3_RELEASE_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - uses: actions/download-artifact@v3
      name: Retrieve uberjar artifact
      with:
        name: metabase-${{ matrix.edition }}-uberjar
    - name: Determine the upload path ## EE is always v1.x.y, OSS is always v0.x.y
      uses: actions/github-script@v6
      id: version_path
      with:
        result-encoding: string
        script: |
          const version = '${{ inputs.version }}';
          const edition = '${{ matrix.edition }}';

          const version_path = edition === 'ee'
            ? 'enterprise/' + version.replace(/^v0\./, "v1.") // always e.g. v1.47.2
            : version.replace(/^v1\./, "v0."); // always e.g. v0.45.6;

          console.log("The download path for this", edition, "edition is", version_path);
          return version_path;
    - name: Upload to S3
      run:
        # FIXME: test bucket
        aws s3 cp ./metabase.jar s3://iethree-downloads.metabase.com/${{ steps.version_path.outputs.result }}/metabase.jar

  verify-s3-download:
    runs-on: ubuntu-22.04
    needs: upload-to-s3
    timeout-minutes: 15
    strategy:
      matrix:
        edition: [oss, ee]
    steps:
    - uses: actions/download-artifact@v3
      name: Retrieve uberjar artifact
      with:
        name: metabase-${{ matrix.edition }}-uberjar
    - name: Determine the download path ## EE is always v1.x.y, OSS is always v0.x.y
      uses: actions/github-script@v6
      id: version_path
      with:
        result-encoding: string
        script: |
          const version = '${{ inputs.version }}';
          const edition = '${{ matrix.edition }}';

          const version_path = edition === 'ee'
            ? 'enterprise/' + version.replace(/^v0\./, "v1.") // always e.g. v1.47.2
            : version.replace(/^v1\./, "v0."); // always e.g. v0.45.6;

          console.log("The download path for this", edition, "edition is", version_path);
          return version_path;
    - name: Upload to S3
      run:
        # FIXME: test bucket
        curl -L http://iethree-downloads.metabase.com.s3.us-east-1.amazonaws.com/${{ steps.version_path.outputs.result }}/metabase.jar -o metabase-downloaded.jar
    - name: Verify Checksum
      run: grep -q $(sha256sum ./metabase-downloaded.jar) SHA256.sum && echo "checksums match" || exit 1

  containerize:
    runs-on: ubuntu-22.04
    needs: download-uberjar
    timeout-minutes: 15
    strategy:
      matrix:
        edition: [oss, ee]
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # IMPORTANT! to get all the tags
    - name: prepare release scripts
      run: cd release && yarn && yarn build
    - name: Determine the docker version tag
      uses: actions/github-script@v6
      id: canonical_version
      with:
        result-encoding: string
        script: |
          const { getCanonicalVersion } = require('${{ github.workspace }}/release/dist/index.cjs');

          const version = '${{ inputs.version }}';
          const edition = '${{ matrix.edition }}';

          const canonical_version = getCanonicalVersion(version, edition);

          console.log("The canonical version of this Metabase", edition, "edition is", canonical_version);

          return canonical_version;
    - uses: actions/download-artifact@v3
      name: Retrieve previously downloaded Uberjar
      with:
        name: metabase-${{ matrix.edition }}-uberjar
    - name: Move the Uberjar to the context dir
      run: mv ./metabase.jar bin/docker/.
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: network=host
    - name: Build ${{ matrix.edition }} container
      uses: docker/build-push-action@v3
      with:
        context: bin/docker/.
        platforms: linux/amd64
        network: host
        tags: localhost:5000/local-metabase:${{ steps.canonical_version.outputs.result }}
        no-cache: true
        push: true

    - name: Launch container
      run: docker run --rm -dp 3000:3000 localhost:5000/local-metabase:${{ steps.canonical_version.outputs.result }}
      timeout-minutes: 5
    - name: Wait for Metabase to start
      run: while ! curl -s 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done
      timeout-minutes: 3

    - name: Determine the target Docker Hub repository
      run: |
        if [[ "${{ matrix.edition }}" == "ee" ]]; then
          echo "Metabase EE: image is going to be pushed to ${{ github.repository_owner }}/metabase-enterprise"
          echo "DOCKERHUB_REPO=${{ github.repository_owner }}/metabase-enterprise" >> $GITHUB_ENV
        else
          echo "Metabase OSS: image is going to be pushed to ${{ github.repository_owner }}/metabase"
          echo "DOCKERHUB_REPO=${{ github.repository_owner }}/metabase" >> $GITHUB_ENV
        fi

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_RELEASE_USERNAME }}
        password: ${{ secrets.DOCKERHUB_RELEASE_TOKEN }}
    - name: Retag and push container image to Docker Hub
      run: |
        echo "Pushing ${{ steps.canonical_version.outputs.result }} to ${{ env.DOCKERHUB_REPO }} ..."
        docker tag localhost:5000/local-metabase:${{ steps.canonical_version.outputs.result }} ${{ env.DOCKERHUB_REPO }}:${{ steps.canonical_version.outputs.result }}
        docker push ${{ env.DOCKERHUB_REPO }}:${{ steps.canonical_version.outputs.result }}
        echo "Finished!"

    - name: Check if the container image should be tagged as latest
      uses: actions/github-script@v6
      id: latest_version_check
      with:
        result-encoding: string
        script: |
          const { execSync } = require("child_process");
          const { isLatestVersion } = require('${{ github.workspace }}/release/dist/index.cjs');

          const currentTag = '${{ inputs.version }}';
          const allTags = execSync("git tag -l").toString("utf-8").split("\n");

          const isLatest = isLatestVersion(currentTag, allTags);

          return isLatest ? "latest" : "not-latest";

    - name: Tag the container image as latest
      if: ${{ steps.latest_version_check.outputs.result == 'latest' }}
      run: |
        echo "Pushing ${{ env.DOCKERHUB_REPO }}:latest ..."
        docker tag localhost:5000/local-metabase:${{ steps.canonical_version.outputs.result }} ${{ env.DOCKERHUB_REPO }}:latest
        docker push ${{ env.DOCKERHUB_REPO }}:latest
        echo "Finished!"

  verify-docker-pull:
    runs-on: ubuntu-22.04
    needs: containerize
    timeout-minutes: 15
    strategy:
      matrix:
        edition: [oss, ee]
    steps:
    - name: Login to Docker Hub # authenticated, to avoid being rate-throttled
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_RELEASE_USERNAME }}
        password: ${{ secrets.DOCKERHUB_RELEASE_TOKEN }}
    - name: Determine the container image to pull
      run: |
        if [[ "${{ matrix.edition }}" = "ee" ]]; then
          echo "DOCKERHUB_REPO=${{ github.repository_owner }}/metabase-enterprise" >> $GITHUB_ENV
        else
          echo "DOCKERHUB_REPO=${{ github.repository_owner }}/metabase" >> $GITHUB_ENV
        fi
      # EE is always v1.x.y, OSS is always v0.x.y
    - name: Determine the docker version tag
      uses: actions/github-script@v6
      id: canonical_version
      with:
        result-encoding: string
        script: |
          const version = '${{ inputs.version }}';
          const edition = '${{ matrix.edition }}';

          const canonical_version = edition === "ee"
            ? version.replace(/^v0\./, "v1.") // always e.g. v1.47.2
            : version.replace(/^v1\./, "v0."); // always e.g. v0.47.2

          console.log("The canonical version of this Metabase", edition, "edition is", canonical_version);

          return canonical_version;
    - name: Pull the container image
      run: |
        echo "Pulling container image ${{ env.DOCKERHUB_REPO }}:${{ steps.canonical_version.outputs.result }} ..."
        docker pull ${{ env.DOCKERHUB_REPO }}:${{ steps.canonical_version.outputs.result }}
        echo "Successful!"
    - name: Launch container
      run: docker run --rm -dp 3000:3000 ${{ env.DOCKERHUB_REPO }}:${{ steps.canonical_version.outputs.result }}
      timeout-minutes: 5
    - name: Wait for Metabase to start
      run: while ! curl -s 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done
      timeout-minutes: 3

  push-tags:
    permissions: write-all
    needs: [verify-s3-download, verify-docker-pull]
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    strategy:
      matrix:
        edition: [oss, ee]
    steps:
    - uses: actions/checkout@v3
      with:
        sparse-checkout: release
    - name: prepare release scripts
      run: cd release && yarn && yarn build
    - name: Tag Release
      uses: actions/github-script@v6
      with:
        result-encoding: string
        script: |
          const { tagRelease, getCanonicalVersion } = require('${{ github.workspace }}/release/dist/index.cjs');

          const version = '${{ inputs.version }}';
          const edition = '${{ matrix.edition }}';

          const canonical_version = getCanonicalVersion(version, edition);

          console.log("The canonical version of this Metabase", edition, "edition is", canonical_version);

          await tagRelease({
            github,
            owner: context.repo.owner,
            repo: context.repo.repo,
            version: canonical_version,
            commitHash: '${{ inputs.commit }}',
          }).catch((err) => {
            console.error('Failed to tag release', canonical_version, err);
            process.exit(1);
          });

  # trigger-docs-update:
  #   needs: push-tags
  #   runs-on: ubuntu-22.04
  #   timeout-minutes: 10
  #   steps:
  #     - uses: actions/github-script@v6
  #       with:
  #         github-token: ${{ secrets.DOCS_UPDATE_TOKEN }}
  #         script: |
  #           github.rest.repos.createDispatchEvent({
  #             owner: '${{ github.repository_owner }}',
  #             repo: '${{ secrets.DOCS_REPO }}',
  #             event_type: 'trigger-docs-update',
  #             client_payload: {
  #               version: '${{ github.ref_name }}'
  #             }
  #           });

  draft-release-notes:
    needs: push-tags
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    permissions: write-all
    strategy:
      matrix:
        edition: [oss, ee]
    steps:
      - uses: actions/checkout@v3
        with:
          sparse-checkout: release
      - name: prepare release scripts
        run: cd release && yarn && yarn build
      - uses: actions/download-artifact@v3
        name: Retrieve uberjar artifact
        with:
          name: metabase-${{ matrix.edition }}-uberjar
      - name: Read Checksum
        run: |
          CHECKSUM=$(cat SHA256.sum)
          echo "CHECKSUM=$CHECKSUM" >> $GITHUB_ENV
      - name: Publish draft release notes
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const { publishRelease, getCanonicalVersion } = require('${{ github.workspace }}/release/dist/index.cjs');

            const version = '${{ inputs.version }}';
            const edition = '${{ matrix.edition }}';

            const canonical_version = getCanonicalVersion(version, edition);

            await publishRelease({
              github,
              owner: context.repo.owner,
              repo: context.repo.repo,
              version: canonical_version,
              checksum: '${{ env.CHECKSUM }}',
            }).then(() => {
              console.log('Successfully published release notes', '${{ inputs.version }}');
            }).catch((err) => {
              console.error('Failed to publish release notes', '${{ inputs.version }}', err);
              process.exit(1);
            });

  publish-version-info:
    runs-on: ubuntu-22.04
    needs: push-tags
    timeout-minutes: 15
    strategy:
      matrix:
        edition: [oss, ee]
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_S3_RELEASE_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_S3_RELEASE_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - uses: actions/checkout@v3
      with:
        sparse-checkout: release
    - name: Prepare build scripts
      run: cd ${{ github.workspace }}/release && yarn && yarn build
    - name: Publish release notes
      uses: actions/github-script@v6
      id: new_version_info
      with:
        result-encoding: string
        script: |
          const { getVersionInfo } = require('${{ github.workspace }}/release/dist/index.cjs');
          const fs = require('fs');

          const newVersionInfo = await getVersionInfo({
            github,
            owner: context.repo.owner,
            repo: context.repo.repo,
            version: "${{ inputs.version }}",
          });

          fs.writeFileSync('version-info.json', JSON.stringify(newVersionInfo));
    - name: Upload new version-info.json to S3
      # FIXME: test bucket names
      run: |
        if [[ "${{ matrix.edition }}" == "ee" ]]; then
          aws s3 cp version-info.json s3://iethree-static.metabase.com/version-info-ee.json
        else
          aws s3 cp version-info.json s3://iethree-static.metabase.com/version-info.json
        fi

    # - name: Create cloudfront invalidation for version-info.json and version-info-ee.json
    #   run: |
    #     aws cloudfront create-invalidation \
    #     --distribution-id E1HU16PWP1JPMC \
    #     --paths "/version-info.json" "/version-info-ee.json"


  # publish-elastic-beanstalk-artifacts:
  #   runs-on: ubuntu-22.04
  #   needs: push-tags
  #   timeout-minutes: 15
  #   env:
  #     NO_SLACK: 1
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Prepare back-end environment
  #     uses: ./.github/actions/prepare-backend
  #   - name: Configure AWS credentials for S3
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_S3_RELEASE_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_S3_RELEASE_SECRET_ACCESS_KEY }}
  #       aws-region: us-east-1
  #   - name: Publish Elastic Beanstalk artifacts
  #     run: ./bin/ebs.sh :version ${{ steps.canonical_version.outputs.result }}
